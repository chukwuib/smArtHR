from app import app, db
from models import User, Job, Question
from ai_modules import generate_placeholder_questions
from werkzeug.security import generate_password_hash

def run_test():
    with app.app_context():
        # Ensure hr_user exists (or create one)
        hr_user = User.query.filter_by(username='hr_user').first()
        if not hr_user:
            print('Creating hr_user...')
            hr_user = User(username='hr_user', password_hash=generate_password_hash('password', method='pbkdf2:sha256'), role='HR')
            db.session.add(hr_user)
            db.session.commit()

        # 1. Define Test Job parameters
        test_job_title = "Test Entry Level Engineer"
        test_job_level = "entry"
        
        # Clean up any existing job and its questions with the same title to make test idempotent
        existing_job = Job.query.filter_by(job_title=test_job_title).first()
        if existing_job:
            Question.query.filter_by(job_id=existing_job.id).delete()
            db.session.delete(existing_job)
            db.session.commit()
        
        print(f"Creating job: {test_job_title} (Level: {test_job_level}) for user {hr_user.username}")
        new_job = Job(job_title=test_job_title,
                      description="A test job for question generation.",
                      level=test_job_level,
                      hr_id=hr_user.id)
        db.session.add(new_job)
        db.session.commit() # Commit to get new_job.id

        # 2. Generate and add placeholder questions (simulating what /create_job does)
        print(f"Generating questions for job ID: {new_job.id}")
        generated_questions_data = generate_placeholder_questions(new_job.level, new_job.job_title)
        
        if not generated_questions_data:
            print("No questions were generated by generate_placeholder_questions.")
        
        for q_data in generated_questions_data:
            question = Question(job_id=new_job.id,
                                question_text=q_data['question_text'],
                                question_type=q_data['question_type'])
            db.session.add(question)
        db.session.commit()
        print(f"Added {len(generated_questions_data)} questions to the database.")

        # 3. Verify
        retrieved_job = Job.query.filter_by(job_title=test_job_title).first()
        
        if retrieved_job:
            print(f"Successfully retrieved job: {retrieved_job.job_title} (Level: {retrieved_job.level})")
            print(f"Number of questions linked: {len(retrieved_job.questions)}")
            if retrieved_job.questions:
                print("Generated Questions:")
                for q in retrieved_job.questions:
                    print(f"- Text: {q.question_text}, Type: {q.question_type}, Job ID: {q.job_id}")
                
                # Specific checks based on job level
                if test_job_level == 'entry':
                    if len(retrieved_job.questions) == 3:
                        print("Test PASSED: Entry level job created with the expected 3 questions.")
                    else:
                        print(f"Test FAILED: Entry level job expected 3 questions, but got {len(retrieved_job.questions)}.")
                # Add more specific checks for other levels if desired
                elif len(retrieved_job.questions) > 0:
                     print(f"Test PASSED: {test_job_level} level job created with questions.")
                else:
                     print(f"Test FAILED: {test_job_level} level job created with NO questions.")
            else:
                print("Test FAILED: Job was retrieved, but it has no questions linked.")
        else:
            print(f"Test FAILED: Could not retrieve job '{test_job_title}'.")

if __name__ == '__main__':
    run_test()
